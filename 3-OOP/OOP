
  OOP : Object Oriented Programming
  객체지향? -> 프로그래밍 패러다임 (프로그래밍의 여러가지 방식 중에 하나)
  객체를 컨셉으로 프로그래밍을 해나가는 방식

  Object -> "관련된 데이터나 코드를 묶을 수 있는 것"
  
  객체지향을 사용하는 언어는
  자바, C++ 등 많이 있지만 전반적인 개념과 코딩은 크게 다르지 않아서 
  하나의 언어로 객체지향을 충분히 학습한다면 다른 프로그래밍 언어를 공부할 때에도 도움이 많이 된다.
  
  우리가 객체지향 프로그래밍 하기 전에 알아야할 것.
    1. Imperative 명령어 and Procedural 절차 Programming
       하나의 어플리케이션을 만든다면 데이터와 함수 위주로 구성하는 것
       정의된 순서대로 (ex. main 안에 함수) 함수가 하나씩 호출하는 것이 절차지향적 프로그래밍
       단점: 신규로 프로젝트에 투입되면 하나의 수정을 위해서 전체적인 어플리케이션 동작 구성을 알아야 한다.
       그리고 Side Effect가 자주 일어난다. 즉, 유지보수가 힘든다.

    2. 객체지향?
      서로 관련된 것을 객체 형태로 관리하는 것.
      만약 특정 함수에 에러가 난다면 관련된 오브젝트만 수정하면 된다.
      생산성을 높여주고 높은 퀄리티의 프로젝트 구성 가능하고 빠른 유지보수가 가능하다.
      if-> 음악플레이어라는 함수를 만든다면 음악 파일과 재생, 중단 기능의 함수를 만들 수 있다.
      이렇듯 일상생활에서 볼 수 있는 물체나 서비스 등을 오브젝트로 만들 수 있다.
      사람과 가까운 생각을 하면서 오브젝트를 구성할 수 있다.
      
      오브젝트는 class의 인스턴스다. class는 붕어빵 만드는 기계이고 오브젝트는 붕어빵이다.